import type { ResultFile } from "@allurereport/plugin-api";
import { ReadStream } from "node:fs";
import "node:fs/promises";
import type { Readable } from "node:stream";
export declare abstract class BaseResultFile implements ResultFile {
    #private;
    fileName: string;
    extension: string | false;
    contentType: string | undefined | false;
    protected constructor(fileName: string);
    protected abstract getContent(): ReadStream | undefined;
    protected abstract readMagicHeader(): Uint8Array | undefined;
    abstract getContentLength(): number | undefined;
    getContentType(): string | undefined;
    getOriginalFileName(): string;
    getExtension(): string;
    asJson<T>(): Promise<T | undefined>;
    asUtf8String(): Promise<string | undefined>;
    asBuffer(): Promise<Buffer | undefined>;
    writeTo(path: string): Promise<void>;
    readContent<T>(transform: (stream: ReadStream) => Promise<T | undefined>): Promise<T | undefined>;
}
export declare class BufferResultFile extends BaseResultFile {
    buffer: Uint8Array;
    constructor(buffer: Uint8Array, fileName: string);
    protected getContent(): ReadStream;
    protected readMagicHeader(): Uint8Array;
    getContentLength(): number | undefined;
}
export declare class PathResultFile extends BaseResultFile {
    path: string;
    constructor(path: string, fileName?: string);
    protected getContent(): ReadStream | undefined;
    protected readMagicHeader(): Uint8Array | undefined;
    getContentLength(): number | undefined;
}
export declare const readSteamToJson: <T>(stream: Readable) => Promise<T | undefined>;
export declare const readStreamToString: (stream: Readable) => Promise<string>;
export declare const readStreamToBuffer: (stream: Readable) => Promise<Buffer>;
