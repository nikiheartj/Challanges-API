var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DefaultPluginState_state, _PluginFiles_parent, _PluginFiles_pluginId, _InMemoryReportFiles_state, _FileSystemReportFiles_output;
import { mkdir, writeFile } from "node:fs/promises";
import { dirname, join, resolve } from "node:path";
export class DefaultPluginState {
    constructor(state) {
        _DefaultPluginState_state.set(this, void 0);
        this.set = async (key, value) => {
            __classPrivateFieldGet(this, _DefaultPluginState_state, "f")[key] = value;
        };
        this.get = async (key) => {
            return __classPrivateFieldGet(this, _DefaultPluginState_state, "f")[key];
        };
        this.unset = async (key) => {
            delete __classPrivateFieldGet(this, _DefaultPluginState_state, "f")[key];
        };
        __classPrivateFieldSet(this, _DefaultPluginState_state, state, "f");
    }
}
_DefaultPluginState_state = new WeakMap();
export class PluginFiles {
    constructor(parent, pluginId) {
        _PluginFiles_parent.set(this, void 0);
        _PluginFiles_pluginId.set(this, void 0);
        this.addFile = async (key, data) => {
            await __classPrivateFieldGet(this, _PluginFiles_parent, "f").addFile(join(__classPrivateFieldGet(this, _PluginFiles_pluginId, "f"), key), data);
        };
        __classPrivateFieldSet(this, _PluginFiles_parent, parent, "f");
        __classPrivateFieldSet(this, _PluginFiles_pluginId, pluginId, "f");
    }
}
_PluginFiles_parent = new WeakMap(), _PluginFiles_pluginId = new WeakMap();
export class InMemoryReportFiles {
    constructor() {
        _InMemoryReportFiles_state.set(this, {});
        this.addFile = async (path, data) => {
            __classPrivateFieldGet(this, _InMemoryReportFiles_state, "f")[path] = data;
        };
    }
}
_InMemoryReportFiles_state = new WeakMap();
export class FileSystemReportFiles {
    constructor(output) {
        _FileSystemReportFiles_output.set(this, void 0);
        this.addFile = async (path, data) => {
            const targetPath = resolve(__classPrivateFieldGet(this, _FileSystemReportFiles_output, "f"), path);
            const targetDirPath = dirname(targetPath);
            await mkdir(targetDirPath, { recursive: true });
            await writeFile(targetPath, data, { encoding: "utf-8" });
        };
        __classPrivateFieldSet(this, _FileSystemReportFiles_output, resolve(output), "f");
    }
}
_FileSystemReportFiles_output = new WeakMap();
