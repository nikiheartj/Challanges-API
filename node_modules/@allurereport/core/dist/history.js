import { mkdir, readFile, writeFile } from "node:fs/promises";
import { dirname, resolve } from "node:path";
import { isFileNotFoundError } from "./utils/misc.js";
const createHistoryItems = (testResults) => {
    return testResults
        .filter((tr) => tr.historyId)
        .map(({ id, name, fullName, historyId, status, error: { message, trace } = {}, start, stop, duration }) => {
        return {
            id,
            name,
            fullName,
            status,
            message,
            trace,
            start,
            stop,
            duration,
            historyId: historyId,
            reportLinks: [],
        };
    })
        .reduce((previousValue, currentValue) => {
        previousValue[currentValue.historyId] = currentValue;
        return previousValue;
    }, {});
};
export const createHistory = (reportUuid, reportName = "Allure Report", testCases, testResults) => {
    const knownTestCaseIds = testCases.map((tc) => tc.id);
    return {
        uuid: reportUuid,
        name: reportName,
        timestamp: new Date().getTime(),
        knownTestCaseIds,
        testResults: createHistoryItems(testResults),
        metrics: {},
    };
};
export const readHistory = async (historyPath) => {
    const path = resolve(historyPath);
    try {
        return (await readFile(path, { encoding: "utf-8" }))
            .split("\n")
            .filter((line) => line && line.trim() !== "")
            .map((line) => JSON.parse(line));
    }
    catch (e) {
        if (isFileNotFoundError(e)) {
            return [];
        }
        throw e;
    }
};
export const writeHistory = async (historyPath, data) => {
    const path = resolve(historyPath);
    const parentDir = dirname(path);
    await mkdir(parentDir, { recursive: true });
    await writeFile(path, `${JSON.stringify(data)}\n`, { encoding: "utf-8", flag: "a+" });
};
