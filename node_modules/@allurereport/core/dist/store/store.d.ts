import type { AttachmentLink, HistoryDataPoint, HistoryTestResult, KnownTestFailure, Statistic, TestCase, TestFixtureResult, TestResult } from "@allurereport/core-api";
import type { AllureStore, DefaultLabelsConfig, ResultFile } from "@allurereport/plugin-api";
import type { RawFixtureResult, RawMetadata, RawTestResult, ReaderContext, ResultsVisitor } from "@allurereport/reader-api";
import type { EventEmitter } from "node:events";
import type { AllureStoreEvents } from "../utils/event.js";
export declare class DefaultAllureStore implements AllureStore, ResultsVisitor {
    #private;
    readonly indexTestResultByTestCase: Map<string, TestResult[]>;
    readonly indexLatestTestResultByHistoryId: Map<string, TestResult>;
    readonly indexTestResultByHistoryId: Map<string, TestResult[]>;
    readonly indexAttachmentByTestResult: Map<string, AttachmentLink[]>;
    readonly indexAttachmentByFixture: Map<string, AttachmentLink[]>;
    readonly indexFixturesByTestResult: Map<string, TestFixtureResult[]>;
    readonly indexKnownByHistoryId: Map<string, KnownTestFailure[]>;
    constructor(params?: {
        history?: HistoryDataPoint[];
        known?: KnownTestFailure[];
        eventEmitter?: EventEmitter<AllureStoreEvents>;
        defaultLabels?: DefaultLabelsConfig;
    });
    visitTestResult(raw: RawTestResult, context: ReaderContext): Promise<void>;
    visitTestFixtureResult(result: RawFixtureResult, context: ReaderContext): Promise<void>;
    visitAttachmentFile(resultFile: ResultFile, context: ReaderContext): Promise<void>;
    visitMetadata(metadata: RawMetadata): Promise<void>;
    allTestCases(): Promise<TestCase[]>;
    allTestResults(options?: {
        includeHidden: boolean;
    }): Promise<TestResult[]>;
    allAttachments(options?: {
        includeMissed?: boolean;
        includeUnused?: boolean;
    }): Promise<AttachmentLink[]>;
    allMetadata(): Promise<Record<string, any>>;
    allFixtures(): Promise<TestFixtureResult[]>;
    allHistoryDataPoints(): Promise<HistoryDataPoint[]>;
    allKnownIssues(): Promise<KnownTestFailure[]>;
    testCaseById(tcId: string): Promise<TestCase | undefined>;
    testResultById(trId: string): Promise<TestResult | undefined>;
    attachmentById(attachmentId: string): Promise<AttachmentLink | undefined>;
    attachmentContentById(attachmentId: string): Promise<ResultFile | undefined>;
    metadataByKey<T>(key: string): Promise<T | undefined>;
    testResultsByTcId(tcId: string): Promise<TestResult[]>;
    attachmentsByTrId(trId: string): Promise<AttachmentLink[]>;
    retriesByTrId(trId: string): Promise<TestResult[]>;
    historyByTrId(trId: string): Promise<HistoryTestResult[]>;
    fixturesByTrId(trId: string): Promise<TestFixtureResult[]>;
    failedTestResults(): Promise<TestResult[]>;
    unknownFailedTestResults(): Promise<TestResult[]>;
    testResultsByLabel(labelName: string): Promise<{
        [x: string]: TestResult[];
        _: TestResult[];
    }>;
    testsStatistic(): Promise<Statistic>;
}
