import { findByLabelName, notNull } from "@allurereport/core-api";
import { md5 } from "@allurereport/plugin-api";
import { extension, lookupContentType } from "@allurereport/reader-api";
import MarkdownIt from "markdown-it";
import { randomUUID } from "node:crypto";
const defaultStatus = "unknown";
export const __unknown = "#___unknown_value___#";
export const testFixtureResultRawToState = (stateData, raw, context) => {
    const name = raw.name || "Unknown test";
    return {
        id: md5(raw.uuid || randomUUID()),
        testResultIds: raw.testResults?.filter(notNull).map(md5) ?? [],
        type: raw.type,
        name,
        status: raw.status ?? defaultStatus,
        error: {
            message: raw.message,
            trace: raw.trace,
        },
        ...processTimings(raw),
        steps: convertSteps(stateData, raw.steps),
        sourceMetadata: {
            readerId: context.readerId,
            metadata: context.metadata ?? {},
        },
    };
};
export const testResultRawToState = (stateData, raw, context) => {
    const labels = convertLabels(raw.labels);
    const hostId = findByLabelName(labels, "host");
    const threadId = findByLabelName(labels, "thread");
    const name = raw.name || "Unknown test";
    const testCase = processTestCase(stateData, raw);
    const parameters = convertParameters(raw.parameters);
    return {
        id: md5(raw.uuid || randomUUID()),
        name,
        testCase,
        fullName: raw.fullName,
        historyId: calculateHistoryId(testCase, parameters),
        status: raw.status ?? defaultStatus,
        error: {
            message: raw.message,
            trace: raw.trace,
        },
        ...processTimings(raw),
        description: raw.description,
        descriptionHtml: raw.descriptionHtml ?? markdownToHtml(raw.description),
        precondition: raw.precondition,
        preconditionHtml: raw.preconditionHtml ?? markdownToHtml(raw.precondition),
        expectedResult: raw.expectedResult,
        expectedResultHtml: raw.expectedResultHtml ?? markdownToHtml(raw.expectedResult),
        flaky: raw.flaky ?? false,
        muted: raw.muted ?? false,
        known: raw.known ?? false,
        hidden: false,
        labels,
        steps: convertSteps(stateData, raw.steps),
        parameters,
        links: convertLinks(raw.links),
        hostId,
        threadId,
        sourceMetadata: {
            readerId: context.readerId,
            metadata: context.metadata ?? {},
        },
    };
};
const processTestCase = ({ testCases }, raw) => {
    const [id, allureId] = calculateTestId(raw);
    if (id) {
        const maybeTestCase = testCases.get(id);
        if (maybeTestCase) {
            return maybeTestCase;
        }
        const testCase = {
            id,
            allureId,
            name: raw.testCaseName ?? raw.name ?? __unknown,
            fullName: raw.fullName,
        };
        testCases.set(id, testCase);
        return testCase;
    }
    return undefined;
};
const createAttachmentStep = (link) => {
    return {
        link,
        type: "attachment",
    };
};
const processAttachmentLink = ({ attachments, visitAttachmentLink }, attach) => {
    if (!attach.originalFileName) {
        return createAttachmentStep({
            id: randomUUID(),
            originalFileName: undefined,
            contentType: attach.contentType,
            ext: "",
            name: attach.name ?? __unknown,
            missed: true,
            used: true,
        });
    }
    const id = md5(attach.originalFileName);
    const previous = attachments.get(id);
    if (!previous) {
        const contentType = attach.contentType ?? lookupContentType(attach.originalFileName);
        const ext = extension(attach.originalFileName, contentType) ?? "";
        const linkExpected = {
            id,
            originalFileName: attach.originalFileName,
            ext,
            name: attach.name ?? attach.originalFileName,
            contentType,
            used: true,
            missed: true,
        };
        attachments.set(id, linkExpected);
        visitAttachmentLink(linkExpected);
        return createAttachmentStep(linkExpected);
    }
    if (previous.used) {
        return createAttachmentStep({
            id: randomUUID(),
            originalFileName: undefined,
            ext: "",
            name: attach.name ?? attach.originalFileName ?? __unknown,
            contentType: attach.contentType,
            missed: true,
            used: true,
        });
    }
    const link = {
        ...previous,
        id,
        name: attach.name ?? previous.originalFileName,
        contentType: attach.contentType ?? previous.contentType,
        ext: extension(previous.originalFileName, attach.contentType) ?? previous.ext ?? "",
        contentLength: previous.contentLength,
        used: true,
        missed: false,
    };
    attachments.set(id, link);
    visitAttachmentLink(link);
    return createAttachmentStep(link);
};
const processTimings = ({ start, stop, duration, }) => {
    const effectiveDuration = duration ? Math.max(0, duration) : 0;
    if (start !== undefined) {
        if (stop !== undefined) {
            if (stop < start) {
                return { start, stop: start, duration: 0 };
            }
            return { start, stop, duration: stop - start };
        }
        return { start, stop: start + effectiveDuration, duration: effectiveDuration };
    }
    if (stop !== undefined) {
        return { start: stop - effectiveDuration, stop, duration: effectiveDuration };
    }
    return { start: undefined, stop: undefined, duration };
};
const convertLabels = (labels) => {
    return labels?.filter(notNull)?.map(convertLabel)?.flatMap(processTagLabels) ?? [];
};
const convertLabel = (label) => {
    return {
        name: label.name ?? __unknown,
        value: label.value,
    };
};
const convertSteps = (stateData, steps) => steps?.filter(notNull)?.map((step) => convertStep(stateData, step)) ?? [];
const convertStep = (stateData, step) => {
    if (step.type === "step") {
        return {
            stepId: md5(`${step.name}${step.start}`),
            name: step.name ?? __unknown,
            status: step.status ?? defaultStatus,
            steps: convertSteps(stateData, step.steps),
            parameters: convertParameters(step.parameters),
            ...processTimings(step),
            type: "step",
        };
    }
    return {
        ...processAttachmentLink(stateData, step),
    };
};
const convertParameters = (parameters) => parameters
    ?.filter(notNull)
    ?.filter((p) => p.name)
    ?.map(convertParameter) ?? [];
const convertParameter = (param) => ({
    name: param.name ?? __unknown,
    value: param.value ?? __unknown,
    hidden: param.hidden ?? false,
    excluded: param.excluded ?? false,
    masked: param.masked ?? false,
});
const convertLinks = (links) => links
    ?.filter(notNull)
    ?.filter((l) => l.url)
    ?.map(convertLink) ?? [];
const convertLink = (link) => ({
    name: link.name,
    url: link.url ?? __unknown,
    type: link.type,
});
const markdownToHtml = (value) => (value ? new MarkdownIt().render(value) : undefined);
const calculateTestId = (raw) => {
    const maybeAllureId = raw.labels?.find((label) => label.name === "ALLURE_ID" || label.name === "AS_ID")?.value;
    if (maybeAllureId) {
        return [md5(`ALLURE_ID=${maybeAllureId}`), maybeAllureId];
    }
    if (raw.testId) {
        return [md5(raw.testId), undefined];
    }
    if (raw.fullName) {
        return [md5(raw.fullName), undefined];
    }
    return [undefined, undefined];
};
const calculateHistoryId = (testCase, parameters) => {
    if (!testCase) {
        return undefined;
    }
    const paramsPart = stringifyParams(parameters);
    return `${testCase.id}.${md5(paramsPart)}`;
};
const parametersCompare = (a, b) => {
    return (a.name ?? "").localeCompare(b.name) || a.value.localeCompare(b.value ?? "");
};
const stringifyParams = (parameters) => {
    if (!parameters) {
        return "";
    }
    return parameters
        .filter((p) => !p?.excluded)
        .sort(parametersCompare)
        .map((p) => `${p.name}:${p.value}`)
        .join(",");
};
const idLabelMatcher = new RegExp("^@?allure\\.id[:=](?<id>.+)$");
const tagLabelMatcher = new RegExp("^@?allure\\.label\\.(?<name>.+)[:=](?<value>.+)$");
const processTagLabels = (label) => {
    if (label.name === "tag" && label.value) {
        const matchTag = label.value.match(idLabelMatcher);
        if (matchTag) {
            const id = matchTag?.groups?.id;
            return id ? [{ name: "ALLURE_ID", value: id }] : [];
        }
        const matchLabel = label.value.match(tagLabelMatcher);
        if (matchLabel) {
            const name = matchLabel?.groups?.name;
            const value = matchLabel?.groups?.value;
            return name && value ? [{ name, value }] : [];
        }
    }
    return label.name ? [{ name: label.name, value: label.value }] : [];
};
