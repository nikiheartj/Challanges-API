var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AllureReport_instances, _AllureReport_reportUuid, _AllureReport_reportName, _AllureReport_store, _AllureReport_readers, _AllureReport_plugins, _AllureReport_reportFiles, _AllureReport_eventEmitter, _AllureReport_events, _AllureReport_qualityGate, _AllureReport_appendHistory, _AllureReport_historyPath, _AllureReport_realTime, _AllureReport_state, _AllureReport_stage, _AllureReport_update, _AllureReport_eachPlugin, _AllureReport_getPluginState;
import { allure1, allure2, attachments, cucumberjson, junitXml } from "@allurereport/reader";
import { PathResultFile } from "@allurereport/reader-api";
import console from "node:console";
import { randomUUID } from "node:crypto";
import { EventEmitter } from "node:events";
import { readFileSync } from "node:fs";
import { opendir, realpath } from "node:fs/promises";
import { join, resolve } from "node:path";
import { createHistory, writeHistory } from "./history.js";
import { DefaultPluginState, PluginFiles } from "./plugin.js";
import { QualityGate } from "./qualityGate.js";
import { DefaultAllureStore } from "./store/store.js";
import { Events } from "./utils/event.js";
const { version } = JSON.parse(readFileSync(new URL("../package.json", import.meta.url), "utf8"));
const initRequired = "report is not initialised. Call the start() method first.";
export class AllureReport {
    constructor(opts) {
        _AllureReport_instances.add(this);
        _AllureReport_reportUuid.set(this, void 0);
        _AllureReport_reportName.set(this, void 0);
        _AllureReport_store.set(this, void 0);
        _AllureReport_readers.set(this, void 0);
        _AllureReport_plugins.set(this, void 0);
        _AllureReport_reportFiles.set(this, void 0);
        _AllureReport_eventEmitter.set(this, void 0);
        _AllureReport_events.set(this, void 0);
        _AllureReport_qualityGate.set(this, void 0);
        _AllureReport_appendHistory.set(this, void 0);
        _AllureReport_historyPath.set(this, void 0);
        _AllureReport_realTime.set(this, void 0);
        _AllureReport_state.set(this, void 0);
        _AllureReport_stage.set(this, "init");
        this.readDirectory = async (resultsDir) => {
            if (__classPrivateFieldGet(this, _AllureReport_stage, "f") !== "running") {
                throw new Error(initRequired);
            }
            const resultsDirPath = resolve(resultsDir);
            const dir = await opendir(resultsDirPath);
            try {
                for await (const dirent of dir) {
                    if (dirent.isFile()) {
                        const path = await realpath(join(dirent.parentPath, dirent.name));
                        await this.readResult(new PathResultFile(path, dirent.name));
                    }
                }
            }
            catch (e) {
                console.error("can't read directory", e);
            }
        };
        this.readFile = async (resultsFile) => {
            if (__classPrivateFieldGet(this, _AllureReport_stage, "f") !== "running") {
                throw new Error(initRequired);
            }
            await this.readResult(new PathResultFile(resultsFile));
        };
        this.readResult = async (data) => {
            if (__classPrivateFieldGet(this, _AllureReport_stage, "f") !== "running") {
                throw new Error(initRequired);
            }
            for (const reader of __classPrivateFieldGet(this, _AllureReport_readers, "f")) {
                try {
                    const processed = await reader.read(__classPrivateFieldGet(this, _AllureReport_store, "f"), data);
                    if (processed) {
                        return;
                    }
                }
                catch (ignored) { }
            }
        };
        this.start = async () => {
            if (__classPrivateFieldGet(this, _AllureReport_stage, "f") === "running") {
                throw new Error("the report is already started");
            }
            if (__classPrivateFieldGet(this, _AllureReport_stage, "f") === "done") {
                throw new Error("the report is already stopped, the restart isn't supported at the moment");
            }
            __classPrivateFieldSet(this, _AllureReport_stage, "running", "f");
            await __classPrivateFieldGet(this, _AllureReport_eachPlugin, "f").call(this, true, async (plugin, context) => {
                await plugin.start?.(context, __classPrivateFieldGet(this, _AllureReport_store, "f"), __classPrivateFieldGet(this, _AllureReport_events, "f"));
            });
            if (__classPrivateFieldGet(this, _AllureReport_realTime, "f")) {
                await __classPrivateFieldGet(this, _AllureReport_update, "f").call(this);
                __classPrivateFieldGet(this, _AllureReport_events, "f").onAll(async () => {
                    await __classPrivateFieldGet(this, _AllureReport_update, "f").call(this);
                });
            }
        };
        _AllureReport_update.set(this, async () => {
            if (__classPrivateFieldGet(this, _AllureReport_stage, "f") !== "running") {
                return;
            }
            await __classPrivateFieldGet(this, _AllureReport_eachPlugin, "f").call(this, false, async (plugin, context) => {
                await plugin.update?.(context, __classPrivateFieldGet(this, _AllureReport_store, "f"));
            });
        });
        this.done = async () => {
            if (__classPrivateFieldGet(this, _AllureReport_stage, "f") !== "running") {
                throw new Error(initRequired);
            }
            __classPrivateFieldGet(this, _AllureReport_events, "f").offAll();
            __classPrivateFieldSet(this, _AllureReport_stage, "done", "f");
            await __classPrivateFieldGet(this, _AllureReport_eachPlugin, "f").call(this, false, async (plugin, context) => {
                await plugin.done?.(context, __classPrivateFieldGet(this, _AllureReport_store, "f"));
            });
            if (__classPrivateFieldGet(this, _AllureReport_appendHistory, "f")) {
                const testResults = await __classPrivateFieldGet(this, _AllureReport_store, "f").allTestResults();
                const testCases = await __classPrivateFieldGet(this, _AllureReport_store, "f").allTestCases();
                const historyDataPoint = createHistory(__classPrivateFieldGet(this, _AllureReport_reportUuid, "f"), __classPrivateFieldGet(this, _AllureReport_reportName, "f"), testCases, testResults);
                await writeHistory(__classPrivateFieldGet(this, _AllureReport_historyPath, "f"), historyDataPoint);
            }
        };
        _AllureReport_eachPlugin.set(this, async (initState, consumer) => {
            if (initState) {
                __classPrivateFieldSet(this, _AllureReport_state, {}, "f");
            }
            for (const descriptor of __classPrivateFieldGet(this, _AllureReport_plugins, "f")) {
                if (!descriptor.enabled) {
                    continue;
                }
                const id = descriptor.id;
                const plugin = descriptor.plugin;
                const pluginState = __classPrivateFieldGet(this, _AllureReport_instances, "m", _AllureReport_getPluginState).call(this, initState, id);
                if (!pluginState) {
                    console.error("plugin error: state is empty");
                    continue;
                }
                const pluginFiles = new PluginFiles(__classPrivateFieldGet(this, _AllureReport_reportFiles, "f"), id);
                const pluginContext = {
                    allureVersion: version,
                    reportUuid: __classPrivateFieldGet(this, _AllureReport_reportUuid, "f"),
                    reportName: __classPrivateFieldGet(this, _AllureReport_reportName, "f"),
                    state: pluginState,
                    reportFiles: pluginFiles,
                };
                try {
                    await consumer.call(this, plugin, pluginContext);
                    if (initState) {
                        __classPrivateFieldGet(this, _AllureReport_state, "f")[id] = pluginState;
                    }
                }
                catch (e) {
                    console.error(`plugin ${id} error`, e);
                }
            }
        });
        this.validate = async () => {
            await __classPrivateFieldGet(this, _AllureReport_qualityGate, "f").validate(__classPrivateFieldGet(this, _AllureReport_store, "f"));
        };
        const { name, readers = [allure1, allure2, cucumberjson, junitXml, attachments], plugins = [], history, known, reportFiles, qualityGate, realTime, appendHistory, historyPath, defaultLabels = {}, } = opts;
        __classPrivateFieldSet(this, _AllureReport_reportUuid, randomUUID(), "f");
        __classPrivateFieldSet(this, _AllureReport_reportName, name, "f");
        __classPrivateFieldSet(this, _AllureReport_eventEmitter, new EventEmitter(), "f");
        __classPrivateFieldSet(this, _AllureReport_events, new Events(__classPrivateFieldGet(this, _AllureReport_eventEmitter, "f")), "f");
        __classPrivateFieldSet(this, _AllureReport_realTime, realTime, "f");
        __classPrivateFieldSet(this, _AllureReport_appendHistory, appendHistory ?? true, "f");
        __classPrivateFieldSet(this, _AllureReport_historyPath, historyPath, "f");
        __classPrivateFieldSet(this, _AllureReport_store, new DefaultAllureStore({
            history,
            known,
            eventEmitter: __classPrivateFieldGet(this, _AllureReport_eventEmitter, "f"),
            defaultLabels,
        }), "f");
        __classPrivateFieldSet(this, _AllureReport_readers, [...readers], "f");
        __classPrivateFieldSet(this, _AllureReport_plugins, [...plugins], "f");
        __classPrivateFieldSet(this, _AllureReport_reportFiles, reportFiles, "f");
        __classPrivateFieldSet(this, _AllureReport_qualityGate, new QualityGate(qualityGate), "f");
    }
    get store() {
        return __classPrivateFieldGet(this, _AllureReport_store, "f");
    }
    get exitCode() {
        return __classPrivateFieldGet(this, _AllureReport_qualityGate, "f").exitCode;
    }
    get validationResults() {
        return __classPrivateFieldGet(this, _AllureReport_qualityGate, "f").result;
    }
}
_AllureReport_reportUuid = new WeakMap(), _AllureReport_reportName = new WeakMap(), _AllureReport_store = new WeakMap(), _AllureReport_readers = new WeakMap(), _AllureReport_plugins = new WeakMap(), _AllureReport_reportFiles = new WeakMap(), _AllureReport_eventEmitter = new WeakMap(), _AllureReport_events = new WeakMap(), _AllureReport_qualityGate = new WeakMap(), _AllureReport_appendHistory = new WeakMap(), _AllureReport_historyPath = new WeakMap(), _AllureReport_realTime = new WeakMap(), _AllureReport_state = new WeakMap(), _AllureReport_stage = new WeakMap(), _AllureReport_update = new WeakMap(), _AllureReport_eachPlugin = new WeakMap(), _AllureReport_instances = new WeakSet(), _AllureReport_getPluginState = function _AllureReport_getPluginState(init, id) {
    return init ? new DefaultPluginState({}) : __classPrivateFieldGet(this, _AllureReport_state, "f")?.[id];
};
