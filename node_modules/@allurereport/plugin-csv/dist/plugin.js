import { formatDuration } from "@allurereport/core-api";
import { generateCsv } from "./csv.js";
import { formatSteps, labelValue } from "./utils.js";
const defaultFields = [
    { header: "Full Name", accessor: "fullName" },
    {
        header: "Name",
        accessor: "name",
    },
    {
        header: "Status",
        accessor: "status",
    },
    {
        header: "Duration",
        accessor: (result) => formatDuration(result.duration),
    },
    { header: "Error", accessor: (tr) => tr.error?.message },
    { header: "Stack Trace", accessor: (tr) => tr.error?.trace },
    { header: "Steps", accessor: formatSteps },
    { header: "Parent Suite", accessor: labelValue("parentSuite") },
    { header: "Suite", accessor: labelValue("suite") },
    { header: "Sub Suite", accessor: labelValue("subSuite") },
    { header: "Epic", accessor: labelValue("epic") },
    { header: "Feature", accessor: labelValue("feature") },
    { header: "Story", accessor: labelValue("story") },
];
const defaultSort = (a, b) => a.name.localeCompare(b.name);
export class CsvPlugin {
    constructor(options = {}) {
        this.options = options;
        this.done = async (context, store) => {
            const { reportFiles } = context;
            const testResults = await store.allTestResults();
            const { fields = defaultFields, sort = defaultSort, filter, fileName = "report.csv" } = this.options;
            const content = await generateCsv(testResults, fields, sort, filter, this.options);
            const result = Buffer.from(content, "utf-8");
            await reportFiles.addFile(fileName, result);
        };
    }
}
