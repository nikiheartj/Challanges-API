import { statusesList } from "../constants.js";
export const reverse = (comparator) => {
    return (a, b) => comparator(b, a);
};
export const nullsLast = (compare) => {
    return (a, b) => a === b ? 0 : a === undefined || a === null ? 1 : b === undefined || b === null ? -1 : compare(a, b);
};
export const nullsFirst = (compare) => {
    return (a, b) => a === b ? 0 : a === undefined || a === null ? -1 : b === undefined || b === null ? 1 : compare(a, b);
};
export const nullsDefault = (compare, defaultValue) => {
    return (a, b) => compare(a ?? defaultValue, b ?? defaultValue);
};
export const compareBy = (property, compare, defaultValue) => {
    return nullsLast((a, b) => {
        if (defaultValue !== undefined) {
            return compare(a[property] ?? defaultValue, b[property] ?? defaultValue);
        }
        if (property in a && property in b) {
            return compare(a[property], b[property]);
        }
        return 0;
    });
};
export const andThen = (comparators) => {
    return (a, b) => {
        for (const compare of comparators) {
            const res = compare(a, b);
            if (res !== 0) {
                return res;
            }
        }
        return 0;
    };
};
export const alphabetically = () => nullsLast((a, b) => a.localeCompare(b));
export const ordinal = () => nullsLast((a, b) => a - b);
export const byStatus = () => {
    return nullsLast((a, b) => {
        return statusesList.indexOf(a) - statusesList.indexOf(b);
    });
};
export const byStatistic = () => {
    const compares = statusesList.map((status) => compareBy(status, reverse(ordinal()), 0));
    return nullsLast(andThen(compares));
};
export const byName = () => nullsLast(compareBy("name", alphabetically()));
