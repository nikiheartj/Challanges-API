import type { Statistic } from "../aggregate.js";
import type { TestStatus } from "../model.js";
export type SortFunction<T> = () => Comparator<T>;
export type Comparator<T> = (a: T, b: T) => number;
type Value<T, P> = T extends any ? (P extends keyof T ? T[P] : P extends "" ? T : never) : never;
export declare const reverse: <T>(comparator: Comparator<T>) => Comparator<T>;
export declare const nullsLast: <T extends {}>(compare: Comparator<T>) => Comparator<T | undefined>;
export declare const nullsFirst: <T extends {}>(compare: Comparator<T>) => Comparator<T | undefined>;
export declare const nullsDefault: <T extends {}>(compare: Comparator<T>, defaultValue: T) => Comparator<T | undefined>;
export declare const compareBy: <T extends Record<string, any> = {}, P extends keyof T = keyof T>(property: P, compare: Comparator<Value<T, P>>, defaultValue?: T[P]) => Comparator<T>;
export declare const andThen: <T>(comparators: Comparator<T>[]) => Comparator<T>;
export declare const alphabetically: SortFunction<string | undefined>;
export declare const ordinal: SortFunction<number | undefined>;
export declare const byStatus: SortFunction<TestStatus | undefined>;
export declare const byStatistic: SortFunction<Statistic | undefined>;
export declare const byName: SortFunction<Partial<{
    name: string;
}> | undefined>;
export {};
