type BaseBtnProps = {
    text?: string;
    isPending?: boolean;
    size?: "s" | "m" | "l";
    style?: "primary" | "outline" | "ghost" | "flat" | "raised";
    action?: "default" | "danger" | "positive";
    icon?: string;
    iconSize?: "xs" | "s" | "m";
    fullWidth?: boolean;
    isIconButton?: boolean;
    isDropdownButton?: boolean;
    onClick?: (e: MouseEvent) => void;
    type?: HTMLButtonElement["type"];
    isDisabled?: boolean;
    isActive?: boolean;
    focusable?: boolean;
    className?: string;
    dataTestId?: string;
};
export type ButtonProps = Omit<BaseBtnProps, "text" | "isIconButton" | "isDropdownButton"> & Pick<Required<BaseBtnProps>, "text">;
export declare const Button: (props: ButtonProps) => import("preact").JSX.Element;
export type IconButtonProps = Omit<BaseBtnProps, "text" | "icon" | "autoFocus" | "fullWidth" | "isIconButton" | "isDropdownButton"> & Pick<Required<BaseBtnProps>, "icon">;
export declare const IconButton: (props: IconButtonProps) => import("preact").JSX.Element;
type DropdownButtonProps = Omit<BaseBtnProps, "type" | "autoFocus" | "isDropdownButton" | "isIconButton" | "text" | "icon" | "isActive"> & Pick<Required<BaseBtnProps>, "text"> & {
    isExpanded?: boolean;
};
export declare const DropdownButton: (props: DropdownButtonProps) => import("preact").JSX.Element;
export {};
//# sourceMappingURL=index.d.ts.map