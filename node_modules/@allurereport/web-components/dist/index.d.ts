import * as preact from 'preact';
import { JSX, FunctionalComponent, VNode, ComponentChildren, FunctionComponent } from 'preact';
import { Signal } from '@preact/signals';
import { TestStatus } from '@allurereport/core-api';
import { AxisProps } from '@nivo/axes';
import { LegendProps } from '@nivo/legends';
import { LineSvgProps } from '@nivo/line';
import { CSSProperties } from 'preact/compat';

declare const allureIcons: {
    arrowsChevronDown: string;
    github: string;
    lineAlertsAlertCircle: string;
    lineAlertsNotificationBox: string;
    lineArrowsChevronDown: string;
    lineArrowsChevronDownDouble: string;
    lineArrowsChevronRight: string;
    lineArrowsChevronUp: string;
    lineArrowsChevronUpDouble: string;
    lineArrowsCornerDownRight: string;
    lineArrowsExpand3: string;
    lineArrowsRefreshCcw1: string;
    lineArrowsSortLineAsc: string;
    lineArrowsSortLineDesc: string;
    lineArrowsSwitchVertical1: string;
    lineChartsBarChartSquare: string;
    lineDevBug2: string;
    lineDevCodeSquare: string;
    lineDevDataflow3: string;
    lineFilesClipboardCheck: string;
    lineFilesFile2: string;
    lineFilesFileAttachment2: string;
    lineFilesFolder: string;
    lineGeneralCheck: string;
    lineGeneralChecklist3: string;
    lineGeneralCopy3: string;
    lineGeneralDownloadCloud: string;
    lineGeneralEqual: string;
    lineGeneralEye: string;
    lineGeneralHomeLine: string;
    lineGeneralLink1: string;
    lineGeneralLinkExternal: string;
    lineGeneralSearchMd: string;
    lineGeneralSettings1: string;
    lineGeneralXClose: string;
    lineGeneralZap: string;
    lineHelpersFlag: string;
    lineHelpersPlayCircle: string;
    lineIconBomb2: string;
    lineImagesImage: string;
    lineSecurityKey: string;
    lineShapesDotCircle: string;
    lineShapesMoon: string;
    lineShapesSun: string;
    lineTimeClockStopwatch: string;
    reportLogo: string;
    solidAlertCircle: string;
    solidCheckCircle: string;
    solidHelpCircle: string;
    solidMinusCircle: string;
    solidXCircle: string;
    spinner: string;
    view: string;
    viewOff: string;
};
type SvgIconProps = Omit<JSX.HTMLAttributes<SVGElement>, "className" | "id" | "size" | "inline"> & {
    size?: "xs" | "s" | "m";
    className?: string;
    id: string;
    inline?: boolean;
};
declare const SvgIcon: ({ id, size, inline, className }: SvgIconProps) => JSX.Element;

type BaseBtnProps = {
    text?: string;
    isPending?: boolean;
    size?: "s" | "m" | "l";
    style?: "primary" | "outline" | "ghost" | "flat" | "raised";
    action?: "default" | "danger" | "positive";
    icon?: string;
    iconSize?: "xs" | "s" | "m";
    fullWidth?: boolean;
    isIconButton?: boolean;
    isDropdownButton?: boolean;
    onClick?: (e: MouseEvent) => void;
    type?: HTMLButtonElement["type"];
    isDisabled?: boolean;
    isActive?: boolean;
    focusable?: boolean;
    className?: string;
    dataTestId?: string;
};
type ButtonProps = Omit<BaseBtnProps, "text" | "isIconButton" | "isDropdownButton"> & Pick<Required<BaseBtnProps>, "text">;
declare const Button: (props: ButtonProps) => preact.JSX.Element;
type IconButtonProps = Omit<BaseBtnProps, "text" | "icon" | "autoFocus" | "fullWidth" | "isIconButton" | "isDropdownButton"> & Pick<Required<BaseBtnProps>, "icon">;
declare const IconButton: (props: IconButtonProps) => preact.JSX.Element;
type DropdownButtonProps = Omit<BaseBtnProps, "type" | "autoFocus" | "isDropdownButton" | "isIconButton" | "text" | "icon" | "isActive"> & Pick<Required<BaseBtnProps>, "text"> & {
    isExpanded?: boolean;
};
declare const DropdownButton: (props: DropdownButtonProps) => preact.JSX.Element;

type SpinnerProps = {
    size?: "s" | "m";
};
declare const Spinner: ({ size }: SpinnerProps) => preact.JSX.Element;

type TextProps = ({
    type?: "paragraph";
    size?: "s" | "m" | "l";
} | {
    type: "ui";
    size: "s" | "m" | "l" | "xs";
}) & {
    className?: string;
    bold?: boolean;
    tag?: keyof JSX.IntrinsicElements;
} & Omit<JSX.HTMLAttributes, "type" | "size" | "className" | "bold" | "tag">;
declare const Text: FunctionalComponent<TextProps>;
type CodeProps = {
    type?: "paragraph" | "ui";
    size?: "s" | "m";
    className?: string;
    bold?: boolean;
    tag?: keyof JSX.IntrinsicElements;
};
declare const Code: FunctionalComponent<CodeProps>;
type HeadingProps = {
    size?: "s" | "m" | "l";
    className?: string;
    tag?: keyof JSX.IntrinsicElements;
} & Omit<JSX.HTMLAttributes, "size" | "className" | "tag">;
declare const Heading: FunctionalComponent<HeadingProps>;

interface TooltipWrapperProps {
    tooltipText?: string;
    tooltipTextAfterClick?: string;
    tooltipComponent?: FunctionalComponent | VNode;
    children: VNode;
    placement?: "top" | "bottom" | "left" | "right";
    triggerMode?: "hover" | "click";
    autoHideDelay?: number;
    isTriggerActive?: boolean;
}
declare const TooltipWrapper: FunctionalComponent<TooltipWrapperProps>;

interface StoreSignalState<T> {
    error?: string;
    loading: boolean;
    data?: T;
}
type LoadableProps<T, K = T> = {
    source: Signal<StoreSignalState<T>>;
    transformData?: (data: T) => K;
    renderData: (data: K) => JSX.Element;
    renderLoader?: () => JSX.Element;
    renderError?: (error: string) => JSX.Element;
};
declare const Loadable: <T, K = T>(props: LoadableProps<T, K>) => JSX.Element | null;

declare const PageLoader: () => preact.JSX.Element;

type Props$4 = {
    placeholder?: string;
    invalid?: string;
    error?: string;
    value: string;
    onChange: (value: string) => void;
    changeDebounce?: number;
};
declare const SearchBox: (props: Props$4) => preact.JSX.Element;

declare const Menu: {
    (props: {
        children: ComponentChildren;
        isInitialOpened?: boolean;
        size?: "s" | "m" | "l" | "xl";
        placement?: "bottom-start" | "bottom-end";
        menuTrigger: (props: {
            onClick: () => void;
            isOpened: boolean;
            setIsOpened: (isOpened: boolean) => void;
        }) => VNode;
        menuTriggerWrapper?: "div" | "span";
    }): preact.JSX.Element;
    Section(props: {
        children: ComponentChildren;
    }): preact.JSX.Element;
    Item(props: ItemProps): preact.JSX.Element;
    ItemWithCheckmark(props: ItemProps & {
        isChecked: boolean;
    }): preact.JSX.Element;
};
type ItemProps = {
    children: ComponentChildren;
    onClick?: () => void;
    leadingIcon?: string;
    rightSlot?: ComponentChildren;
    closeMenuOnClick?: boolean;
    ariaLabel?: string;
    setIsOpened?: (isOpened: boolean) => void;
};

type Props$3 = {
    size?: "s" | "m" | "l";
    count: number;
    truncateCount?: boolean;
    status?: TestStatus;
};
declare const Counter: (props: Props$3) => preact.JSX.Element;

type Props$2 = {
    value: boolean;
    label: string;
    onChange: (value: boolean) => void;
    focusable?: boolean;
};
declare const Toggle: (props: Props$2) => preact.JSX.Element;

type Props$1 = {
    href?: string;
    children: ComponentChildren;
    onClick?: (e: MouseEvent) => void;
};
declare const Link: (props: Props$1) => preact.JSX.Element;

type Slice = {
    status: TestStatus;
    count: number;
    d: string;
};
type Props = {
    slices: Slice[];
    percentage: number;
};
declare const SuccessRatePieChart: (props: Props) => preact.JSX.Element;

declare const Label: FunctionComponent;

interface TrendChartDataItem {
    x: string | number | Date;
    y: number;
}
interface TrendChartData {
    id: string;
    data: TrendChartDataItem[];
}
interface TrendChartProps extends Partial<LineSvgProps> {
    data: TrendChartData[];
    rootArialLabel: string;
    width?: CSSProperties["width"];
    height?: CSSProperties["height"];
}
declare const defaultTrendChartLegendConfig: LegendProps;
declare const defaultAxisBottomConfig: AxisProps;
declare const defaultAxisLeftConfig: AxisProps;
declare const defaultTrendChartConfig: Partial<LineSvgProps>;
declare const TrendChart: FunctionalComponent<TrendChartProps>;

export { Button, Code, Counter, DropdownButton, Heading, IconButton, Label, Link, Loadable, Menu, PageLoader, SearchBox, Spinner, SuccessRatePieChart, SvgIcon, Text, Toggle, TooltipWrapper, TrendChart, type TrendChartData, type TrendChartDataItem, type TrendChartProps, allureIcons, defaultAxisBottomConfig, defaultAxisLeftConfig, defaultTrendChartConfig, defaultTrendChartLegendConfig };
