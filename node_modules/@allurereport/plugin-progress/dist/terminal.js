var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Terminal_stream, _Terminal_wrapLines, _Terminal_dy;
import { clearLine, clearScreenDown, cursorTo, moveCursor } from "node:readline";
export class Terminal {
    constructor(outputStream) {
        _Terminal_stream.set(this, void 0);
        _Terminal_wrapLines.set(this, void 0);
        _Terminal_dy.set(this, void 0);
        __classPrivateFieldSet(this, _Terminal_stream, outputStream, "f");
        __classPrivateFieldSet(this, _Terminal_wrapLines, true, "f");
        __classPrivateFieldSet(this, _Terminal_dy, 0, "f");
    }
    cursorSave() {
        if (!__classPrivateFieldGet(this, _Terminal_stream, "f").isTTY) {
            return;
        }
        __classPrivateFieldGet(this, _Terminal_stream, "f").write("\x1B7");
    }
    cursorRestore() {
        if (!__classPrivateFieldGet(this, _Terminal_stream, "f").isTTY) {
            return;
        }
        __classPrivateFieldGet(this, _Terminal_stream, "f").write("\x1B8");
    }
    cursor(enabled) {
        if (!__classPrivateFieldGet(this, _Terminal_stream, "f").isTTY) {
            return;
        }
        if (enabled) {
            __classPrivateFieldGet(this, _Terminal_stream, "f").write("\x1B[?25h");
        }
        else {
            __classPrivateFieldGet(this, _Terminal_stream, "f").write("\x1B[?25l");
        }
    }
    cursorTo(x, y) {
        if (!__classPrivateFieldGet(this, _Terminal_stream, "f").isTTY) {
            return;
        }
        cursorTo(__classPrivateFieldGet(this, _Terminal_stream, "f"), x, y);
    }
    cursorRelative(dx, dy) {
        if (!__classPrivateFieldGet(this, _Terminal_stream, "f").isTTY) {
            return;
        }
        __classPrivateFieldSet(this, _Terminal_dy, __classPrivateFieldGet(this, _Terminal_dy, "f") + dy, "f");
        moveCursor(__classPrivateFieldGet(this, _Terminal_stream, "f"), dx, dy);
    }
    cursorRelativeReset() {
        if (!__classPrivateFieldGet(this, _Terminal_stream, "f").isTTY) {
            return;
        }
        moveCursor(__classPrivateFieldGet(this, _Terminal_stream, "f"), 0, -__classPrivateFieldGet(this, _Terminal_dy, "f"));
        cursorTo(__classPrivateFieldGet(this, _Terminal_stream, "f"), 0);
        __classPrivateFieldSet(this, _Terminal_dy, 0, "f");
    }
    clearRight() {
        if (!__classPrivateFieldGet(this, _Terminal_stream, "f").isTTY) {
            return;
        }
        clearLine(__classPrivateFieldGet(this, _Terminal_stream, "f"), 1);
    }
    clearLine() {
        if (!__classPrivateFieldGet(this, _Terminal_stream, "f").isTTY) {
            return;
        }
        clearLine(__classPrivateFieldGet(this, _Terminal_stream, "f"), 0);
    }
    clearBottom() {
        if (!__classPrivateFieldGet(this, _Terminal_stream, "f").isTTY) {
            return;
        }
        clearScreenDown(__classPrivateFieldGet(this, _Terminal_stream, "f"));
    }
    newline() {
        var _a;
        __classPrivateFieldGet(this, _Terminal_stream, "f").write("\n");
        __classPrivateFieldSet(this, _Terminal_dy, (_a = __classPrivateFieldGet(this, _Terminal_dy, "f"), _a++, _a), "f");
    }
    write(s, rawWrite = false) {
        if (__classPrivateFieldGet(this, _Terminal_wrapLines, "f") && !rawWrite) {
            __classPrivateFieldGet(this, _Terminal_stream, "f").write(s.slice(0, this.getWidth()));
        }
        else {
            __classPrivateFieldGet(this, _Terminal_stream, "f").write(s);
        }
    }
    lineWrapping(enabled) {
        if (!this.isTTY()) {
            return;
        }
        __classPrivateFieldSet(this, _Terminal_wrapLines, enabled, "f");
        if (enabled) {
            __classPrivateFieldGet(this, _Terminal_stream, "f").write("\x1B[?7h");
        }
        else {
            __classPrivateFieldGet(this, _Terminal_stream, "f").write("\x1B[?7l");
        }
    }
    isTTY() {
        return __classPrivateFieldGet(this, _Terminal_stream, "f").isTTY;
    }
    getWidth() {
        return __classPrivateFieldGet(this, _Terminal_stream, "f").columns || (__classPrivateFieldGet(this, _Terminal_stream, "f").isTTY ? 80 : 200);
    }
}
_Terminal_stream = new WeakMap(), _Terminal_wrapLines = new WeakMap(), _Terminal_dy = new WeakMap();
