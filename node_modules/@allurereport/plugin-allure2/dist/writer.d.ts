import type { ReportFiles, ResultFile } from "@allurereport/plugin-api";
import type { Allure2TestResult } from "./model.js";
export interface ReportFile {
    name: string;
    value: string;
}
export interface Allure2DataWriter {
    writeData(fileName: string, data: any): Promise<void>;
    writeWidget(fileName: string, data: any): Promise<void>;
    writeTestCase(test: Allure2TestResult): Promise<void>;
    writeAttachment(source: string, file: ResultFile): Promise<void>;
}
export declare class FileSystemReportDataWriter implements Allure2DataWriter {
    private readonly output;
    constructor(output: string);
    writeData(fileName: string, data: any): Promise<void>;
    writeWidget(fileName: string, data: any): Promise<void>;
    writeTestCase(test: Allure2TestResult): Promise<void>;
    writeAttachment(source: string, file: ResultFile): Promise<void>;
}
export declare class InMemoryReportDataWriter implements Allure2DataWriter {
    #private;
    writeData(fileName: string, data: any): Promise<void>;
    writeWidget(fileName: string, data: any): Promise<void>;
    writeTestCase(test: Allure2TestResult): Promise<void>;
    writeAttachment(fileName: string, file: ResultFile): Promise<void>;
    reportFiles(): ReportFile[];
}
export declare class ReportFileDataWriter implements Allure2DataWriter {
    readonly reportFiles: ReportFiles;
    constructor(reportFiles: ReportFiles);
    writeData(fileName: string, data: any): Promise<void>;
    writeWidget(fileName: string, data: any): Promise<void>;
    writeAttachment(source: string, file: ResultFile): Promise<void>;
    writeTestCase(test: Allure2TestResult): Promise<void>;
}
