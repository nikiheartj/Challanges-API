import type { Statistic } from "@allurereport/core-api";
import type { Allure2Status, Allure2TestResult, Allure2Time } from "./model.js";
export interface TreeNode {
    name: string;
}
export interface TreeGroup extends TreeNode {
    uid: string;
    name: string;
    children: TreeNode[];
}
export interface TreeLeaf extends TreeNode {
    uid: string;
    parentUid: string;
    status: Allure2Status;
    time: Allure2Time;
    flaky: boolean;
    newFailed: boolean;
    newBroken: boolean;
    newPassed: boolean;
    retriesCount: number;
    retriesStatusChange: boolean;
    tags: string[];
    parameters: string[];
}
export interface TreeLayer {
    groups: string[];
}
export interface WidgetItem {
    uid: string;
    name: string;
    statistic: Statistic;
}
export interface WidgetData {
    items: WidgetItem[];
    total: number;
}
declare const createLeaf: (endNode: TreeGroup, test: Allure2TestResult) => TreeLeaf;
export type LeafFactory = typeof createLeaf;
export type Classifier = (test: Allure2TestResult) => TreeLayer[] | undefined;
export declare const byLabels: (labelNames: string[]) => Classifier;
export declare const createTree: (tests: Allure2TestResult[], classifier: Classifier, leafFactory?: LeafFactory) => TreeGroup;
export declare const collapseTree: (treeGroup: TreeGroup, separator?: string) => TreeGroup;
export declare const createWidget: (root: TreeGroup) => WidgetData;
export {};
